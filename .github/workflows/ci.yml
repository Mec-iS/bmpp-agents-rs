name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  tests:
    runs-on: "${{ matrix.platform.os }}-latest"
    strategy:
      matrix:
        platform:
          [
            { os: "windows", target: "x86_64-pc-windows-msvc" },
            { os: "ubuntu", target: "x86_64-unknown-linux-gnu" },
            { os: "macos", target: "aarch64-apple-darwin" },
          ]
    env:
      TZ: "/usr/share/zoneinfo/your/location"
      # Use vendored OpenSSL to avoid system dependency issues
      OPENSSL_STATIC: 1
      OPENSSL_VENDORED: 1
      # For cross-compilation support
      PKG_CONFIG_ALLOW_CROSS: 1

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies (Ubuntu)
        if: matrix.platform.os == 'ubuntu'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          # For 32-bit builds
          if [[ "${{ matrix.platform.target }}" == *"i686"* ]]; then
            sudo apt-get install -y gcc-multilib
          fi

      - name: Install system dependencies (macOS)
        if: matrix.platform.os == 'macos'
        run: |
          brew update
          brew install openssl pkg-config

      - name: Cache .cargo and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ./target
          key: ${{ runner.os }}-cargo-${{ matrix.platform.target }}-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.platform.target }}-
            ${{ runner.os }}-cargo-

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}
          components: rustfmt, clippy

      - name: Install cross-compilation tools (Ubuntu i686)
        if: matrix.platform.os == 'ubuntu' && matrix.platform.target == 'i686-unknown-linux-gnu'
        run: |
          sudo apt-get install -y gcc-multilib
          sudo apt-get install -y openssl libssl-dev

      # - name: Check code formatting
      #   if: matrix.platform.target == 'x86_64-unknown-linux-gnu'
      #   run: cargo fmt --all -- --check

      # - name: Run clippy
      #   if: matrix.platform.target == 'x86_64-unknown-linux-gnu'
      #   run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        if: matrix.platform.target == 'x86_64-unknown-linux-gnu' || matrix.platform.target == 'x86_64-pc-windows-msvc' || matrix.platform.target == 'aarch64-apple-darwin'
        run: |
          cargo test --all-features

  # Additional job for checking documentation
  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ./target
          key: ${{ runner.os }}-docs-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}
          
      - name: Check documentation
        env:
          RUSTDOCFLAGS: -D warnings
        run: |
          cargo doc --all-features --no-deps

  # Security audit
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install cargo-audit
        run: cargo install cargo-audit
        
      - name: Run security audit
        run: cargo audit
